{
  "変数": {
    "説明": "変数はデータを保持するための名前付きの領域です。プログラムは変数を通して値を読み書きします。型付き言語では型を意識し、動的型付け言語では柔軟に使えます。スコープ（有効範囲）とライフタイム（存在期間）を理解するとバグを減らせます。",
    "例": {
      "python": "x = 10\nprint(x)",
      "php": "<?php\n$x = 10;\necho $x;\n?>",
      "java": "int x = 10;\nSystem.out.println(x);",
      "ruby": "x = 10\nputs x",
      "node": "let x = 10;\nconsole.log(x);"
    }
  },
  "定数": {
    "説明": "定数は変更されない値を意味します。言語によって定数の定義方法が異なります。定数を使うと意味が明確になり偶発的な変更を防げます。名前は慣例的に大文字にします。",
    "例": {
      "python": "PI = 3.14159\nprint(PI)",
      "php": "<?php\ndefine('PI', 3.14159);\necho PI;\n?>",
      "java": "final double PI = 3.14159;\nSystem.out.println(PI);",
      "ruby": "PI = 3.14159\nputs PI",
      "node": "const PI = 3.14159;\nconsole.log(PI);"
    }
  },
  "関数": {
    "説明": "関数は再利用可能な処理のまとまりです。引数と戻り値を持ち、副作用を抑えて純粋関数を目指すとテストしやすくなります。第一級オブジェクトとして関数を扱える言語もあります。",
    "例": {
      "python": "def greet(name):\n    return f'こんにちは {name}'\nprint(greet('ヒカマル'))",
      "php": "<?php\nfunction greet($name){\n  return 'こんにちは ' . $name;\n}\necho greet('ヒカマル');\n?>",
      "java": "static String greet(String name){\n  return \"こんにちは \" + name;\n}\nSystem.out.println(greet(\"ヒカマル\"));",
      "ruby": "def greet(name)\n  \"こんにちは #{name}\"\nend\nputs greet('ヒカマル')",
      "node": "function greet(name){\n  return `こんにちは ${name}`;\n}\nconsole.log(greet('ヒカマル'));"
    }
  },
  "文字列": {
    "説明": "文字列はテキストを表すデータ型です。エンコーディング（例: UTF-8）と不変性（immutable）を理解すると操作での落とし穴を避けられます。テンプレートやフォーマット機能を活用してください。",
    "例": {
      "python": "s = 'こんにちは'\nprint(s)",
      "php": "<?php\n$s = 'こんにちは';\necho $s;\n?>",
      "java": "String s = \"こんにちは\";\nSystem.out.println(s);",
      "ruby": "s = 'こんにちは'\nputs s",
      "node": "let s = 'こんにちは';\nconsole.log(s);"
    }
  },
  "整数": {
    "説明": "整数は小数点を持たない数です。言語によって扱える範囲やオーバーフローの挙動が異なります。大きな整数はライブラリやビルトインの大整数型を使います。",
    "例": {
      "python": "n = 42\nprint(n)",
      "php": "<?php\n$n = 42;\necho $n;\n?>",
      "java": "int n = 42;\nSystem.out.println(n);",
      "ruby": "n = 42\nputs n",
      "node": "let n = 42;\nconsole.log(n);"
    }
  },
  "浮動小数点数": {
    "説明": "浮動小数点数は小数を扱います。丸め誤差が起きるため比較や金融計算では注意が必要です。必要なら十進演算ライブラリを使って精度を確保します。",
    "例": {
      "python": "f = 3.14\nprint(f)",
      "php": "<?php\n$f = 3.14;\necho $f;\n?>",
      "java": "double f = 3.14;\nSystem.out.println(f);",
      "ruby": "f = 3.14\nputs f",
      "node": "let f = 3.14;\nconsole.log(f);"
    }
  },
  "論理値": {
    "説明": "論理値は真(True)または偽(False)を表します。条件分岐の基礎です。真偽評価のルール（truthy/falsy）を言語ごとに理解してください。",
    "例": {
      "python": "b = True\nprint(b)",
      "php": "<?php\n$b = true;\nvar_dump($b);\n?>",
      "java": "boolean b = true;\nSystem.out.println(b);",
      "ruby": "b = true\nputs b",
      "node": "let b = true;\nconsole.log(b);"
    }
  },
  "NULL": {
    "説明": "NULLは値が存在しないことを示します。言語によって呼び名が None,null,NULL 等に分かれます。参照エラーを防ぐために存在チェックを必ず行ってください。",
    "例": {
      "python": "x = None\nprint(x)",
      "php": "<?php\n$x = null;\nvar_dump($x);\n?>",
      "java": "String x = null;\nSystem.out.println(x);",
      "ruby": "x = nil\np x",
      "node": "let x = null;\nconsole.log(x);"
    }
  },
  "算術演算子": {
    "説明": "加算や除算など数値演算に使う演算子群です。演算子の優先順位や整数除算と浮動小数点除算の違いを把握してください。",
    "例": {
      "python": "a = 7\nb = 3\nprint(a + b, a - b, a * b, a / b, a % b, a ** b)",
      "php": "<?php\n$a = 7; $b = 3;\necho $a + $b;\n?>",
      "java": "int a=7,b=3;\nSystem.out.println(a/b);",
      "ruby": "a = 7; b = 3\nputs a / b",
      "node": "let a=7,b=3;\nconsole.log(a / b);"
    }
  },
  "比較演算子": {
    "説明": "等価や大小の比較を行います。等価比較の際は型まで意識する必要がある言語があります（== と === の違い等）。",
    "例": {
      "python": "x = 5\nprint(x == 5, x != 3, x > 2)",
      "php": "<?php\n$x = 5;\nvar_dump($x == 5, $x !== '5');\n?>",
      "java": "int x = 5;\nSystem.out.println(x == 5);",
      "ruby": "x = 5\nputs x == 5",
      "node": "let x = 5;\nconsole.log(x === 5);"
    }
  },
  "論理演算子": {
    "説明": "and/or/not 等で複数条件を組合せます。短絡評価（ショートサーキット）に慣れると効率的に条件を記述できます。",
    "例": {
      "python": "a=True; b=False\nprint(a and not b)",
      "php": "<?php\n$a = true; $b = false;\nvar_dump($a && !$b);\n?>",
      "java": "boolean a=true,b=false;\nSystem.out.println(a && !b);",
      "ruby": "a = true; b = false\nputs a && !b",
      "node": "let a=true,b=false;\nconsole.log(a && !b);"
    }
  },
  "代入演算子": {
    "説明": "値を変数に代入します。複合代入（+= 等）を使うと簡潔に書けます。可読性を優先して使い過ぎに注意してください。",
    "例": {
      "python": "x = 10\nx += 5\nprint(x)",
      "php": "<?php\n$x = 10;\n$x += 5;\necho $x;\n?>",
      "java": "int x = 10;\nx += 5;\nSystem.out.println(x);",
      "ruby": "x = 10\nx += 5\nputs x",
      "node": "let x = 10;\nx += 5;\nconsole.log(x);"
    }
  },
  "条件分岐": {
    "説明": "if / else / elseif 等で流れを分岐します。ネストを深くしすぎず早期リターンを使うと読みやすくなります。",
    "例": {
      "python": "x = 10\nif x > 5:\n    print('大きい')\nelse:\n    print('小さい')",
      "php": "<?php\n$x = 10;\nif($x > 5){ echo '大きい'; } else { echo '小さい'; }\n?>",
      "java": "int x=10;\nif(x>5){ System.out.println(\"大きい\"); } else { System.out.println(\"小さい\"); }",
      "ruby": "x = 10\nif x > 5\n  puts '大きい'\nelse\n  puts '小さい'\nend",
      "node": "let x = 10;\nif(x > 5){ console.log('大きい'); } else { console.log('小さい'); }"
    }
  },
  "繰り返し": {
    "説明": "for や while で同じ処理を繰り返します。イテラブルとイテレータ、終端条件を正しく設定することが重要です。",
    "例": {
      "python": "for i in range(3):\n    print(i)",
      "php": "<?php\nfor($i=0;$i<3;$i++){ echo $i; }\n?>",
      "java": "for(int i=0;i<3;i++){ System.out.println(i); }",
      "ruby": "3.times{ |i| puts i }",
      "node": "for(let i=0;i<3;i++){ console.log(i); }"
    }
  },
  "配列": {
    "説明": "複数の値を格納するデータ構造です。言語ごとに呼び名と操作方法が違います（配列, リスト, ベクタ等）。添字やイテレーションの使い方を覚えます。",
    "例": {
      "python": "fruits = ['りんご','バナナ','みかん']\nprint(fruits[1])",
      "php": "<?php\n$fruits = ['りんご','バナナ','みかん'];\necho $fruits[1];\n?>",
      "java": "String[] fruits = {\"りんご\",\"バナナ\",\"みかん\"};\nSystem.out.println(fruits[1]);",
      "ruby": "fruits = ['りんご','バナナ','みかん']\nputs fruits[1]",
      "node": "let fruits = ['りんご','バナナ','みかん'];\nconsole.log(fruits[1]);"
    }
  },
  "制御構造": {
    "説明": "条件分岐・繰り返し・例外処理などを組み合わせてプログラムの流れを制御します。フロー設計が良いと拡張やデバッグが容易になります。",
    "例": {
      "python": "for i in range(3):\n    if i == 1:\n        continue\n    print('値:', i)",
      "php": "<?php\nfor($i=0;$i<3;$i++){\n  if($i===1) continue;\n  echo '値:'.$i;\n}\n?>",
      "java": "for(int i=0;i<3;i++){\n  if(i==1) continue;\n  System.out.println(\"値:\"+i);\n}",
      "ruby": "3.times do |i|\n  next if i == 1\n  puts \"値: #{i}\"\nend",
      "node": "for(let i=0;i<3;i++){\n  if(i===1) continue;\n  console.log('値:', i);\n}"
    }
  },
  "クラスとオブジェクト": {
    "説明": "クラスはオブジェクトの設計図です。カプセル化・継承・ポリモーフィズムを使い分けオブジェクト指向設計を行います。小さく単純なクラスを作ることが保守性に寄与します。",
    "例": {
      "python": "class Person:\n    def __init__(self, name):\n        self.name = name\n    def greet(self):\n        return f'こんにちは、{self.name}さん'\nuser = Person('ヒカマル')\nprint(user.greet())",
      "php": "<?php\nclass Person{\n  private $name;\n  public function __construct($name){ $this->name = $name; }\n  public function greet(){ return 'こんにちは、'.$this->name.'さん'; }\n}\n$user = new Person('ヒカマル');\necho $user->greet();\n?>",
      "java": "class Person{\n  String name;\n  Person(String name){ this.name = name; }\n  String greet(){ return \"こんにちは、\" + name + \"さん\"; }\n}\nSystem.out.println(new Person(\"ヒカマル\").greet());",
      "ruby": "class Person\n  def initialize(name)\n    @name = name\n  end\n  def greet\n    \"こんにちは、#{@name}さん\"\n  end\nend\nputs Person.new('ヒカマル').greet",
      "node": "class Person{\n  constructor(name){ this.name = name; }\n  greet(){ return `こんにちは、${this.name}さん`; }\n}\nconsole.log(new Person('ヒカマル').greet());"
    }
  }
}
